{"ast":null,"code":"var _jsxFileName = \"D:\\\\project_freebie\\\\working\\\\src\\\\components\\\\Maincomponent.js\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport { useState, useEffect } from 'react';\nimport DataContext from '../context/DataContext';\n//import Modal from './Modal';\n//import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n//import { faHeart } from '@fortawesome/free-solid-svg-icons';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Maincomponent() {\n  _s();\n  const [divs, setDivs] = useState([]);\n  const {\n    datatext\n  } = useContext(DataContext);\n  console.log('test: ', datatext);\n  useEffect(() => {\n    if (datatext) {\n      setDivs(prevDivs => {\n        // Check if the current datatext already exists in the prevDivs\n        const alreadyExists = prevDivs.some(div => div.description === datatext.description && div.contactno === datatext.contactno);\n\n        // If datatext doesn't exist, we add it\n        if (!alreadyExists) {\n          return [...prevDivs, {\n            id: prevDivs.length + 1,\n            description: datatext.description,\n            contactno: datatext.contactno\n          }];\n        }\n        return prevDivs; // If already exists, do not add it\n      });\n    }\n  }, [datatext]); // This effect will run only when datatext changes\n\n  //const [openModal, setOpenModal] = useState(false);\n  // const [divs, setDivs] = useState([]);\n  // const {datatext} = useContext(DataContext);\n  // console.log('test: ', datatext);\n  // useEffect(() => {\n  //   if (datatext) {\n  //     setDivs((prevDivs) => [\n  //       ...prevDivs,\n  //       { id: prevDivs.length + 1, description: datatext.description, contactno: datatext.contactno },\n  //     ]);\n  //   }\n  // }, [datatext]); \n  // Only trigger when datatext changes\n\n  // const CreateDiv =(data)=>{\n  //   setDivs((prevDivs) => [...prevDivs, {id: prevDivs.length+1, description : data.description, contactno: data.contactno }])\n\n  // };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"container\",\n        children: divs.map(div => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cont-data\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"photo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"uname\",\n                children: div.contactno\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 12\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"desc\",\n                children: div.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 12\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 49\n          }, this)\n        }, div.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 9\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n_s(Maincomponent, \"1cbjQ/f40leP0sxOIYb577dlO98=\");\n_c = Maincomponent;\n;\nvar _c;\n$RefreshReg$(_c, \"Maincomponent\");","map":{"version":3,"names":["React","useContext","useState","useEffect","DataContext","jsxDEV","_jsxDEV","Fragment","_Fragment","Maincomponent","_s","divs","setDivs","datatext","console","log","prevDivs","alreadyExists","some","div","description","contactno","id","length","children","map","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/project_freebie/working/src/components/Maincomponent.js"],"sourcesContent":["import React, { useContext } from 'react';\r\nimport {useState, useEffect} from 'react';\r\nimport DataContext from '../context/DataContext';\r\n//import Modal from './Modal';\r\n//import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n//import { faHeart } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\nexport default function Maincomponent() {\r\n  const [divs, setDivs] = useState([]);\r\nconst { datatext } = useContext(DataContext);\r\n\r\nconsole.log('test: ', datatext);\r\n\r\nuseEffect(() => {\r\n  if (datatext) {\r\n    setDivs((prevDivs) => {\r\n      // Check if the current datatext already exists in the prevDivs\r\n      const alreadyExists = prevDivs.some(\r\n        (div) => div.description === datatext.description && div.contactno === datatext.contactno\r\n      );\r\n\r\n      // If datatext doesn't exist, we add it\r\n      if (!alreadyExists) {\r\n        return [\r\n          ...prevDivs,\r\n          { id: prevDivs.length + 1, description: datatext.description, contactno: datatext.contactno }\r\n        ];\r\n      }\r\n\r\n      return prevDivs; // If already exists, do not add it\r\n    });\r\n  }\r\n}, [datatext]); // This effect will run only when datatext changes\r\n\r\n  //const [openModal, setOpenModal] = useState(false);\r\n  // const [divs, setDivs] = useState([]);\r\n  // const {datatext} = useContext(DataContext);\r\n  // console.log('test: ', datatext);\r\n  // useEffect(() => {\r\n  //   if (datatext) {\r\n  //     setDivs((prevDivs) => [\r\n  //       ...prevDivs,\r\n  //       { id: prevDivs.length + 1, description: datatext.description, contactno: datatext.contactno },\r\n  //     ]);\r\n  //   }\r\n  // }, [datatext]); \r\n // Only trigger when datatext changes\r\n\r\n\r\n\r\n  // const CreateDiv =(data)=>{\r\n  //   setDivs((prevDivs) => [...prevDivs, {id: prevDivs.length+1, description : data.description, contactno: data.contactno }])\r\n    \r\n  // };\r\n  \r\n  return (\r\n    <>\r\n    <div  >\r\n    <div id = \"container\">\r\n      {divs.map((div)=>(\r\n        <div key={div.id} className='cont-data'><div className = \"content\">\r\n        <div className='photo' ></div> \r\n        <div className='text'> \r\n           <div className = 'uname'>{div.contactno}</div>\r\n           <div className='desc'>{div.description}</div>\r\n          <br></br>\r\n        </div>\r\n      </div></div>\r\n      ))}\r\n    </div> \r\n      \r\n       {/* <div className = \"content\"><div className='photo' ></div></div> */}\r\n      </div>\r\n      {/* <div >\r\n          <button className='add-item' onClick = {()=>{setOpenModal(true);}}><b>Add Item</b></button>\r\n      </div> */}\r\n\r\n  \r\n      \r\n    </>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}